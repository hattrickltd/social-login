/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ISocialUser, } from "./utils/interfaces";
export namespace Components {
    interface AppleIcon {
    }
    interface AppleLoginButton {
        "border": boolean;
        "clientId": string;
        "disabled": boolean;
        "expand": "" | "block";
        /**
          * Which Apple locale the user will see.
         */
        "locale": string;
        /**
          * Required if `usePopup === true`. Apple processes the authorization request, an HTTP POST request containing the results of the authorization is sent to the URL provided
         */
        "redirectURI": string;
        /**
          * Space-separated string of scopes to request. See https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_js/configuring_your_webpage_for_sign_in_with_apple
         */
        "scopes": string;
        "size": "large" | "medium" | "small";
        /**
          * When `continue_with` is chosen the status will automatically be checked and the `facebookStatus` event will trigger if a user is found.
         */
        "type": "sign in" | "continue";
        /**
          * If the login should be shown as a popup
         */
        "usePopup": boolean;
    }
    interface AppleLoginWrapper {
        "clientId": string;
        /**
          * Which Apple locale the user will see.
         */
        "locale": string;
        /**
          * Required if `usePopup === true`. Apple processes the authorization request, an HTTP POST request containing the results of the authorization is sent to the URL provided
         */
        "redirectURI": string;
        /**
          * Space-separated string of scopes to request. See https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_js/configuring_your_webpage_for_sign_in_with_apple
         */
        "scopes": string;
        /**
          * If the login should be shown as a popup
         */
        "usePopup": boolean;
    }
    interface FacebookIcon {
    }
    interface FacebookLoginButton {
        /**
          * Comma-separated string of `auth_type`s, e.g. `rerequest`, `reauthenticate` or `reauthorize` See https://developers.facebook.com/docs/reference/javascript/FB.login#options
         */
        "authType": string;
        "clientId": string;
        "disabled": boolean;
        "expand": "" | "block";
        /**
          * Comma-separated string of fields to fetch.
         */
        "fields": string;
        /**
          * Which Facebook locale the user will see.
         */
        "locale": string;
        /**
          * Additional Facebook Login options. See https://developers.facebook.com/docs/reference/javascript/FB.login#options
         */
        "options": any;
        /**
          * Comma-separated string of scopes to request. See https://developers.facebook.com/docs/facebook-login/permissions
         */
        "scope": string;
        "size": "large" | "medium" | "small";
        /**
          * When `continue_with` is chosen the status will automatically be checked and the `facebookStatus` event will trigger if a user is found.
         */
        "type": "login_with" | "continue_with";
        /**
          * Version of the Facebook API to use.
         */
        "version": string;
    }
    interface FacebookLoginWrapper {
        /**
          * Comma-separated string of `auth_type`s, e.g. `rerequest`, `reauthenticate` or `reauthorize` See https://developers.facebook.com/docs/reference/javascript/FB.login#options
         */
        "authType": string;
        "clientId": string;
        "expand": "" | "block";
        /**
          * Comma-separated string of fields to fetch.
         */
        "fields": string;
        /**
          * Which Facebook locale the user will see.
         */
        "locale": string;
        /**
          * Additional Facebook Login options. See https://developers.facebook.com/docs/reference/javascript/FB.login#options
         */
        "options": any;
        /**
          * Comma-separated string of scopes to request. See https://developers.facebook.com/docs/facebook-login/permissions
         */
        "scope": string;
        /**
          * When `continue_with` is chosen the status will automatically be checked and the `facebookStatus` event will trigger if a user is found.
         */
        "type": "login_with" | "continue_with";
        /**
          * Version of the Facebook API to use.
         */
        "version": string;
    }
    interface GoogleIcon {
    }
    interface GoogleLoginButton {
        "checkStatus": boolean;
        "clientId": string;
        "disabled": boolean;
        "expand": "" | "block";
        "loadFont": boolean;
        /**
          * Space-separated string of scopes to request.
         */
        "scope": string;
        "size": "large" | "medium" | "small";
    }
    interface GoogleLoginWrapper {
        "checkStatus": boolean;
        "clientId": string;
        "expand": "" | "block";
        /**
          * Space-separated string of scopes to request.
         */
        "scope": string;
    }
}
declare global {
    interface HTMLAppleIconElement extends Components.AppleIcon, HTMLStencilElement {
    }
    var HTMLAppleIconElement: {
        prototype: HTMLAppleIconElement;
        new (): HTMLAppleIconElement;
    };
    interface HTMLAppleLoginButtonElement extends Components.AppleLoginButton, HTMLStencilElement {
    }
    var HTMLAppleLoginButtonElement: {
        prototype: HTMLAppleLoginButtonElement;
        new (): HTMLAppleLoginButtonElement;
    };
    interface HTMLAppleLoginWrapperElement extends Components.AppleLoginWrapper, HTMLStencilElement {
    }
    var HTMLAppleLoginWrapperElement: {
        prototype: HTMLAppleLoginWrapperElement;
        new (): HTMLAppleLoginWrapperElement;
    };
    interface HTMLFacebookIconElement extends Components.FacebookIcon, HTMLStencilElement {
    }
    var HTMLFacebookIconElement: {
        prototype: HTMLFacebookIconElement;
        new (): HTMLFacebookIconElement;
    };
    interface HTMLFacebookLoginButtonElement extends Components.FacebookLoginButton, HTMLStencilElement {
    }
    var HTMLFacebookLoginButtonElement: {
        prototype: HTMLFacebookLoginButtonElement;
        new (): HTMLFacebookLoginButtonElement;
    };
    interface HTMLFacebookLoginWrapperElement extends Components.FacebookLoginWrapper, HTMLStencilElement {
    }
    var HTMLFacebookLoginWrapperElement: {
        prototype: HTMLFacebookLoginWrapperElement;
        new (): HTMLFacebookLoginWrapperElement;
    };
    interface HTMLGoogleIconElement extends Components.GoogleIcon, HTMLStencilElement {
    }
    var HTMLGoogleIconElement: {
        prototype: HTMLGoogleIconElement;
        new (): HTMLGoogleIconElement;
    };
    interface HTMLGoogleLoginButtonElement extends Components.GoogleLoginButton, HTMLStencilElement {
    }
    var HTMLGoogleLoginButtonElement: {
        prototype: HTMLGoogleLoginButtonElement;
        new (): HTMLGoogleLoginButtonElement;
    };
    interface HTMLGoogleLoginWrapperElement extends Components.GoogleLoginWrapper, HTMLStencilElement {
    }
    var HTMLGoogleLoginWrapperElement: {
        prototype: HTMLGoogleLoginWrapperElement;
        new (): HTMLGoogleLoginWrapperElement;
    };
    interface HTMLElementTagNameMap {
        "apple-icon": HTMLAppleIconElement;
        "apple-login-button": HTMLAppleLoginButtonElement;
        "apple-login-wrapper": HTMLAppleLoginWrapperElement;
        "facebook-icon": HTMLFacebookIconElement;
        "facebook-login-button": HTMLFacebookLoginButtonElement;
        "facebook-login-wrapper": HTMLFacebookLoginWrapperElement;
        "google-icon": HTMLGoogleIconElement;
        "google-login-button": HTMLGoogleLoginButtonElement;
        "google-login-wrapper": HTMLGoogleLoginWrapperElement;
    }
}
declare namespace LocalJSX {
    interface AppleIcon {
    }
    interface AppleLoginButton {
        "border"?: boolean;
        "clientId"?: string;
        "disabled"?: boolean;
        "expand"?: "" | "block";
        /**
          * Which Apple locale the user will see.
         */
        "locale"?: string;
        "onAppleError"?: (event: CustomEvent<Error>) => void;
        "onAppleLogin"?: (event: CustomEvent<ISocialUser>) => void;
        /**
          * Required if `usePopup === true`. Apple processes the authorization request, an HTTP POST request containing the results of the authorization is sent to the URL provided
         */
        "redirectURI"?: string;
        /**
          * Space-separated string of scopes to request. See https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_js/configuring_your_webpage_for_sign_in_with_apple
         */
        "scopes"?: string;
        "size"?: "large" | "medium" | "small";
        /**
          * When `continue_with` is chosen the status will automatically be checked and the `facebookStatus` event will trigger if a user is found.
         */
        "type"?: "sign in" | "continue";
        /**
          * If the login should be shown as a popup
         */
        "usePopup"?: boolean;
    }
    interface AppleLoginWrapper {
        "clientId"?: string;
        /**
          * Which Apple locale the user will see.
         */
        "locale"?: string;
        "onAppleError"?: (event: CustomEvent<Error>) => void;
        "onAppleLogin"?: (event: CustomEvent<ISocialUser>) => void;
        /**
          * Required if `usePopup === true`. Apple processes the authorization request, an HTTP POST request containing the results of the authorization is sent to the URL provided
         */
        "redirectURI"?: string;
        /**
          * Space-separated string of scopes to request. See https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_js/configuring_your_webpage_for_sign_in_with_apple
         */
        "scopes"?: string;
        /**
          * If the login should be shown as a popup
         */
        "usePopup"?: boolean;
    }
    interface FacebookIcon {
    }
    interface FacebookLoginButton {
        /**
          * Comma-separated string of `auth_type`s, e.g. `rerequest`, `reauthenticate` or `reauthorize` See https://developers.facebook.com/docs/reference/javascript/FB.login#options
         */
        "authType"?: string;
        "clientId"?: string;
        "disabled"?: boolean;
        "expand"?: "" | "block";
        /**
          * Comma-separated string of fields to fetch.
         */
        "fields"?: string;
        /**
          * Which Facebook locale the user will see.
         */
        "locale"?: string;
        "onFacebookError"?: (event: CustomEvent<Error>) => void;
        "onFacebookLogin"?: (event: CustomEvent<ISocialUser>) => void;
        "onFacebookStatus"?: (event: CustomEvent<ISocialUser>) => void;
        /**
          * Additional Facebook Login options. See https://developers.facebook.com/docs/reference/javascript/FB.login#options
         */
        "options"?: any;
        /**
          * Comma-separated string of scopes to request. See https://developers.facebook.com/docs/facebook-login/permissions
         */
        "scope"?: string;
        "size"?: "large" | "medium" | "small";
        /**
          * When `continue_with` is chosen the status will automatically be checked and the `facebookStatus` event will trigger if a user is found.
         */
        "type"?: "login_with" | "continue_with";
        /**
          * Version of the Facebook API to use.
         */
        "version"?: string;
    }
    interface FacebookLoginWrapper {
        /**
          * Comma-separated string of `auth_type`s, e.g. `rerequest`, `reauthenticate` or `reauthorize` See https://developers.facebook.com/docs/reference/javascript/FB.login#options
         */
        "authType"?: string;
        "clientId"?: string;
        "expand"?: "" | "block";
        /**
          * Comma-separated string of fields to fetch.
         */
        "fields"?: string;
        /**
          * Which Facebook locale the user will see.
         */
        "locale"?: string;
        "onFacebookError"?: (event: CustomEvent<Error>) => void;
        "onFacebookLogin"?: (event: CustomEvent<ISocialUser>) => void;
        "onFacebookStatus"?: (event: CustomEvent<ISocialUser>) => void;
        /**
          * Additional Facebook Login options. See https://developers.facebook.com/docs/reference/javascript/FB.login#options
         */
        "options"?: any;
        /**
          * Comma-separated string of scopes to request. See https://developers.facebook.com/docs/facebook-login/permissions
         */
        "scope"?: string;
        /**
          * When `continue_with` is chosen the status will automatically be checked and the `facebookStatus` event will trigger if a user is found.
         */
        "type"?: "login_with" | "continue_with";
        /**
          * Version of the Facebook API to use.
         */
        "version"?: string;
    }
    interface GoogleIcon {
    }
    interface GoogleLoginButton {
        "checkStatus"?: boolean;
        "clientId"?: string;
        "disabled"?: boolean;
        "expand"?: "" | "block";
        "loadFont"?: boolean;
        "onGoogleError"?: (event: CustomEvent<Error>) => void;
        "onGoogleLogin"?: (event: CustomEvent<ISocialUser>) => void;
        "onGoogleStatus"?: (event: CustomEvent<ISocialUser>) => void;
        /**
          * Space-separated string of scopes to request.
         */
        "scope"?: string;
        "size"?: "large" | "medium" | "small";
    }
    interface GoogleLoginWrapper {
        "checkStatus"?: boolean;
        "clientId"?: string;
        "expand"?: "" | "block";
        "onGoogleError"?: (event: CustomEvent<Error>) => void;
        "onGoogleLogin"?: (event: CustomEvent<ISocialUser>) => void;
        "onGoogleStatus"?: (event: CustomEvent<ISocialUser>) => void;
        /**
          * Space-separated string of scopes to request.
         */
        "scope"?: string;
    }
    interface IntrinsicElements {
        "apple-icon": AppleIcon;
        "apple-login-button": AppleLoginButton;
        "apple-login-wrapper": AppleLoginWrapper;
        "facebook-icon": FacebookIcon;
        "facebook-login-button": FacebookLoginButton;
        "facebook-login-wrapper": FacebookLoginWrapper;
        "google-icon": GoogleIcon;
        "google-login-button": GoogleLoginButton;
        "google-login-wrapper": GoogleLoginWrapper;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "apple-icon": LocalJSX.AppleIcon & JSXBase.HTMLAttributes<HTMLAppleIconElement>;
            "apple-login-button": LocalJSX.AppleLoginButton & JSXBase.HTMLAttributes<HTMLAppleLoginButtonElement>;
            "apple-login-wrapper": LocalJSX.AppleLoginWrapper & JSXBase.HTMLAttributes<HTMLAppleLoginWrapperElement>;
            "facebook-icon": LocalJSX.FacebookIcon & JSXBase.HTMLAttributes<HTMLFacebookIconElement>;
            "facebook-login-button": LocalJSX.FacebookLoginButton & JSXBase.HTMLAttributes<HTMLFacebookLoginButtonElement>;
            "facebook-login-wrapper": LocalJSX.FacebookLoginWrapper & JSXBase.HTMLAttributes<HTMLFacebookLoginWrapperElement>;
            "google-icon": LocalJSX.GoogleIcon & JSXBase.HTMLAttributes<HTMLGoogleIconElement>;
            "google-login-button": LocalJSX.GoogleLoginButton & JSXBase.HTMLAttributes<HTMLGoogleLoginButtonElement>;
            "google-login-wrapper": LocalJSX.GoogleLoginWrapper & JSXBase.HTMLAttributes<HTMLGoogleLoginWrapperElement>;
        }
    }
}
