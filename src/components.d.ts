/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ISocialUser, } from "./utils/interfaces";
export namespace Components {
    interface FacebookIcon {
    }
    interface FacebookLoginButton {
        "clientId": string;
        "disabled": boolean;
        "expand": "" | "block";
        /**
          * Comma-separated string of fields to fetch.
         */
        "fields": string;
        /**
          * Which Facebook locale the user will see.
         */
        "locale": string;
        /**
          * Comma-separated string of scopes to request.
         */
        "scope": string;
        "size": "large" | "medium" | "small";
        /**
          * When `continue_with` is chosen the status will automatically be checked and the `facebookStatus` event will trigger if a user is found.
         */
        "type": "login_with" | "continue_with";
        /**
          * Version of the Facebook API to use.
         */
        "version": string;
    }
    interface FacebookLoginWrapper {
        "clientId": string;
        "expand": "" | "block";
        /**
          * Comma-separated string of fields to fetch.
         */
        "fields": string;
        /**
          * Which Facebook locale the user will see.
         */
        "locale": string;
        /**
          * Comma-separated string of scopes to request.
         */
        "scope": string;
        /**
          * When `continue_with` is chosen the status will automatically be checked and the `facebookStatus` event will trigger if a user is found.
         */
        "type": "login_with" | "continue_with";
        /**
          * Version of the Facebook API to use.
         */
        "version": string;
    }
    interface GoogleIcon {
    }
    interface GoogleLoginButton {
        "checkStatus": boolean;
        "clientId": string;
        "disabled": boolean;
        "expand": "" | "block";
        "loadFont": boolean;
        /**
          * Space-separated string of scopes to request.
         */
        "scope": string;
        "size": "large" | "medium" | "small";
    }
    interface GoogleLoginWrapper {
        "checkStatus": boolean;
        "clientId": string;
        "expand": "" | "block";
        /**
          * Space-separated string of scopes to request.
         */
        "scope": string;
    }
}
declare global {
    interface HTMLFacebookIconElement extends Components.FacebookIcon, HTMLStencilElement {
    }
    var HTMLFacebookIconElement: {
        prototype: HTMLFacebookIconElement;
        new (): HTMLFacebookIconElement;
    };
    interface HTMLFacebookLoginButtonElement extends Components.FacebookLoginButton, HTMLStencilElement {
    }
    var HTMLFacebookLoginButtonElement: {
        prototype: HTMLFacebookLoginButtonElement;
        new (): HTMLFacebookLoginButtonElement;
    };
    interface HTMLFacebookLoginWrapperElement extends Components.FacebookLoginWrapper, HTMLStencilElement {
    }
    var HTMLFacebookLoginWrapperElement: {
        prototype: HTMLFacebookLoginWrapperElement;
        new (): HTMLFacebookLoginWrapperElement;
    };
    interface HTMLGoogleIconElement extends Components.GoogleIcon, HTMLStencilElement {
    }
    var HTMLGoogleIconElement: {
        prototype: HTMLGoogleIconElement;
        new (): HTMLGoogleIconElement;
    };
    interface HTMLGoogleLoginButtonElement extends Components.GoogleLoginButton, HTMLStencilElement {
    }
    var HTMLGoogleLoginButtonElement: {
        prototype: HTMLGoogleLoginButtonElement;
        new (): HTMLGoogleLoginButtonElement;
    };
    interface HTMLGoogleLoginWrapperElement extends Components.GoogleLoginWrapper, HTMLStencilElement {
    }
    var HTMLGoogleLoginWrapperElement: {
        prototype: HTMLGoogleLoginWrapperElement;
        new (): HTMLGoogleLoginWrapperElement;
    };
    interface HTMLElementTagNameMap {
        "facebook-icon": HTMLFacebookIconElement;
        "facebook-login-button": HTMLFacebookLoginButtonElement;
        "facebook-login-wrapper": HTMLFacebookLoginWrapperElement;
        "google-icon": HTMLGoogleIconElement;
        "google-login-button": HTMLGoogleLoginButtonElement;
        "google-login-wrapper": HTMLGoogleLoginWrapperElement;
    }
}
declare namespace LocalJSX {
    interface FacebookIcon {
    }
    interface FacebookLoginButton {
        "clientId"?: string;
        "disabled"?: boolean;
        "expand"?: "" | "block";
        /**
          * Comma-separated string of fields to fetch.
         */
        "fields"?: string;
        /**
          * Which Facebook locale the user will see.
         */
        "locale"?: string;
        "onFacebookError"?: (event: CustomEvent<Error>) => void;
        "onFacebookLogin"?: (event: CustomEvent<ISocialUser>) => void;
        "onFacebookStatus"?: (event: CustomEvent<ISocialUser>) => void;
        /**
          * Comma-separated string of scopes to request.
         */
        "scope"?: string;
        "size"?: "large" | "medium" | "small";
        /**
          * When `continue_with` is chosen the status will automatically be checked and the `facebookStatus` event will trigger if a user is found.
         */
        "type"?: "login_with" | "continue_with";
        /**
          * Version of the Facebook API to use.
         */
        "version"?: string;
    }
    interface FacebookLoginWrapper {
        "clientId"?: string;
        "expand"?: "" | "block";
        /**
          * Comma-separated string of fields to fetch.
         */
        "fields"?: string;
        /**
          * Which Facebook locale the user will see.
         */
        "locale"?: string;
        "onFacebookError"?: (event: CustomEvent<Error>) => void;
        "onFacebookLogin"?: (event: CustomEvent<ISocialUser>) => void;
        "onFacebookStatus"?: (event: CustomEvent<ISocialUser>) => void;
        /**
          * Comma-separated string of scopes to request.
         */
        "scope"?: string;
        /**
          * When `continue_with` is chosen the status will automatically be checked and the `facebookStatus` event will trigger if a user is found.
         */
        "type"?: "login_with" | "continue_with";
        /**
          * Version of the Facebook API to use.
         */
        "version"?: string;
    }
    interface GoogleIcon {
    }
    interface GoogleLoginButton {
        "checkStatus"?: boolean;
        "clientId"?: string;
        "disabled"?: boolean;
        "expand"?: "" | "block";
        "loadFont"?: boolean;
        "onGoogleError"?: (event: CustomEvent<Error>) => void;
        "onGoogleLogin"?: (event: CustomEvent<ISocialUser>) => void;
        "onGoogleStatus"?: (event: CustomEvent<ISocialUser>) => void;
        /**
          * Space-separated string of scopes to request.
         */
        "scope"?: string;
        "size"?: "large" | "medium" | "small";
    }
    interface GoogleLoginWrapper {
        "checkStatus"?: boolean;
        "clientId"?: string;
        "expand"?: "" | "block";
        "onGoogleError"?: (event: CustomEvent<Error>) => void;
        "onGoogleLogin"?: (event: CustomEvent<ISocialUser>) => void;
        "onGoogleStatus"?: (event: CustomEvent<ISocialUser>) => void;
        /**
          * Space-separated string of scopes to request.
         */
        "scope"?: string;
    }
    interface IntrinsicElements {
        "facebook-icon": FacebookIcon;
        "facebook-login-button": FacebookLoginButton;
        "facebook-login-wrapper": FacebookLoginWrapper;
        "google-icon": GoogleIcon;
        "google-login-button": GoogleLoginButton;
        "google-login-wrapper": GoogleLoginWrapper;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "facebook-icon": LocalJSX.FacebookIcon & JSXBase.HTMLAttributes<HTMLFacebookIconElement>;
            "facebook-login-button": LocalJSX.FacebookLoginButton & JSXBase.HTMLAttributes<HTMLFacebookLoginButtonElement>;
            "facebook-login-wrapper": LocalJSX.FacebookLoginWrapper & JSXBase.HTMLAttributes<HTMLFacebookLoginWrapperElement>;
            "google-icon": LocalJSX.GoogleIcon & JSXBase.HTMLAttributes<HTMLGoogleIconElement>;
            "google-login-button": LocalJSX.GoogleLoginButton & JSXBase.HTMLAttributes<HTMLGoogleLoginButtonElement>;
            "google-login-wrapper": LocalJSX.GoogleLoginWrapper & JSXBase.HTMLAttributes<HTMLGoogleLoginWrapperElement>;
        }
    }
}
